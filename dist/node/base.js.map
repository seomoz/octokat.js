{"version":3,"sources":["../../src/base.js"],"names":["fetch","require","plus","deprecate","TREE_OPTIONS","Chainer","VerbMethods","toPromise","SimpleVerbsPlugin","Requester","applyHypermedia","isBuffer","data","global","uncamelizeObj","obj","Array","isArray","map","i","Object","o","iterable","keys","j","length","key","value","uncamelize","OctokatBase","clientOptions","plugins","disableHypermedia","instance","fetchImpl","Fetch","request","method","path","options","raw","isBase64","isBoolean","cb","requester","then","val","context","_parseWithContextPromise","verbMethods","chain","me","user","parse","url","responseMiddlewareAsyncs","filter","responseMiddlewareAsync","plugin","bind","prev","Promise","resolve","forEach","p","_fromUrlWithDefault","defaultFn","args","injectVerbMethods","fromUrl","_fromUrlCurried","fn","templateArgs","apply","test","status","api","lastMessage","messages","module","exports"],"mappings":"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","file":"base.js","sourcesContent":["const fetch = require('./adapters/fetch-node')\nconst plus = require('./plus')\nconst deprecate = require('./deprecate')\nconst TREE_OPTIONS = require('./grammar/tree-options')\nconst Chainer = require('./chainer')\nconst { VerbMethods, toPromise } = require('./verb-methods')\n\n// Use the following plugins by default (they should be neglegible additional code)\nconst SimpleVerbsPlugin = require('./plugins/simple-verbs')\n\nconst Requester = require('./requester')\nconst applyHypermedia = require('./helpers/hypermedia')\n\n// Checks if a response is a Buffer or not\nconst isBuffer = (data) => {\n  if (typeof global['Buffer'] !== 'undefined') {\n    return global['Buffer'].isBuffer(data)\n  } else {\n    // If `global` is not defined then we are not running inside Node so\n    // the object could never be a Buffer.\n    return false\n  }\n}\n\nlet uncamelizeObj = function (obj) {\n  if (Array.isArray(obj)) {\n    return (obj.map((i) => uncamelizeObj(i)))\n  } else if (obj === Object(obj)) {\n    let o = {}\n    let iterable = Object.keys(obj)\n    for (let j = 0; j < iterable.length; j++) {\n      let key = iterable[j]\n      let value = obj[key]\n      o[plus.uncamelize(key)] = uncamelizeObj(value)\n    }\n    return o\n  } else {\n    return obj\n  }\n}\n\nlet OctokatBase = function (clientOptions = {}) {\n  let plugins = clientOptions.plugins || [SimpleVerbsPlugin]\n\n  // TODO remove disableHypermedia\n  let {disableHypermedia} = clientOptions\n  // set defaults\n  if (typeof disableHypermedia === 'undefined' || disableHypermedia === null) { disableHypermedia = false }\n\n  // the octokat instance\n  let instance = {}\n\n  let fetchImpl = OctokatBase.Fetch || fetch\n\n  let request = function (method, path, data, options = {raw: false, isBase64: false, isBoolean: false}, cb) {\n    // replacer = new Replacer(request)\n\n    // Use a slightly convoluted syntax so browserify does not include the\n    // NodeJS Buffer in the browser version.\n    // data is a Buffer when uploading a release asset file\n    if (data && !isBuffer(data)) {\n      data = uncamelizeObj(data)\n    }\n\n    // For each request, convert the JSON into Objects\n    let requester = new Requester(instance, clientOptions, plugins, fetchImpl)\n\n    return requester.request(method, path, data, options).then((val) => {\n      if ((options || {}).raw) { return val }\n\n      if (!disableHypermedia) {\n        let context = {\n          data: val,\n          plugins,\n          requester,\n          instance,\n          clientOptions\n        }\n        return instance._parseWithContextPromise(path, context)\n      } else {\n        return val\n      }\n    })\n  }\n\n  let verbMethods = new VerbMethods(plugins, {request});\n  (new Chainer(verbMethods)).chain('', null, TREE_OPTIONS, instance)\n\n  // Special case for `me`\n  instance.me = instance.user\n\n  instance.parse = function (data) { // The signature of toPromise has cb as the 1st arg\n    let context = {\n      requester: {request},\n      plugins,\n      data,\n      instance,\n      clientOptions\n    }\n    return instance._parseWithContextPromise('', context)\n  }\n\n  // If not callback is provided then return a promise\n  instance.parse = toPromise(instance.parse)\n\n  instance._parseWithContextPromise = function (path, context) {\n    let { data } = context\n    if (data) {\n      context.url = data.url || path\n    }\n\n    let responseMiddlewareAsyncs = plus.map(plus.filter(plugins, ({responseMiddlewareAsync}) => responseMiddlewareAsync), plugin => plugin.responseMiddlewareAsync.bind(plugin)\n    )\n\n    let prev = Promise.resolve(context)\n    responseMiddlewareAsyncs.forEach((p) => {\n      prev = prev.then(p)\n    })\n    return prev.then((val) => {\n      return val.data\n    })\n  }\n\n  // TODO remove this deprectaion too\n  instance._fromUrlWithDefault = function (path, defaultFn, ...args) {\n    path = applyHypermedia(path, ...args)\n    verbMethods.injectVerbMethods(path, defaultFn)\n    return defaultFn\n  }\n\n  instance.fromUrl = function (path, ...args) {\n    let defaultFn = function (...args) {\n      deprecate('call ....fetch() explicitly instead of ...()')\n      return defaultFn.fetch(...args)\n    }\n\n    return instance._fromUrlWithDefault(path, defaultFn, ...args)\n  }\n\n  instance._fromUrlCurried = function (path, defaultFn) {\n    let fn = function (...templateArgs) {\n      // This conditional logic is for the deprecated .nextPage() call\n      if (defaultFn && templateArgs.length === 0) {\n        return defaultFn.apply(fn)\n      } else {\n        return instance.fromUrl(path, ...templateArgs)\n      }\n    }\n\n    if (!/\\{/.test(path)) {\n      verbMethods.injectVerbMethods(path, fn)\n    }\n    return fn\n  }\n\n  // Add the GitHub Status API https://status.github.com/api\n  instance.status = instance.fromUrl('https://status.github.com/api/status.json')\n  instance.status.api = instance.fromUrl('https://status.github.com/api.json')\n  instance.status.lastMessage = instance.fromUrl('https://status.github.com/api/last-message.json')\n  instance.status.messages = instance.fromUrl('https://status.github.com/api/messages.json')\n\n  return instance\n}\n\nmodule.exports = OctokatBase\n"]}