{"version":3,"sources":["../../src/plus.js"],"names":["filter","require","forEach","map","plus","camelize","string","replace","m","toUpperCase","uncamelize","match","letter","toLowerCase","dasherize","slice","extend","target","source","Object","keys","key","forOwn","obj","iterator","module","exports"],"mappings":";;AAAA;AACA;AACA,IAAMA,SAASC,QAAQ,qBAAR,CAAf;AACA,IAAMC,UAAUD,QAAQ,mBAAR,CAAhB;AACA,IAAME,MAAMF,QAAQ,kBAAR,CAAZ;;AAEA;AACA,IAAIG,OAAO;AACTC,UADS,oBACCC,MADD,EACS;AAChB,QAAIA,MAAJ,EAAY;AACV,aAAOA,OAAOC,OAAP,CAAe,YAAf,EAA6B;AAAA,eAAKC,EAAE,CAAF,EAAKC,WAAL,EAAL;AAAA,OAA7B,CAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAP;AACD;AACF,GAPQ;AASTC,YATS,sBASGJ,MATH,EASW;AAClB,QAAI,CAACA,MAAL,EAAa;AAAE,aAAO,EAAP;AAAW;AAC1B,WAAOA,OAAOC,OAAP,CAAe,WAAf,EAA4B,UAACI,KAAD;AAAA,UAAQC,MAAR,uEAAiB,EAAjB;AAAA,mBAA4BA,OAAOC,WAAP,EAA5B;AAAA,KAA5B,CAAP;AACD,GAZQ;AAcTC,WAdS,qBAcER,MAdF,EAcU;AACjB,QAAI,CAACA,MAAL,EAAa;AAAE,aAAO,EAAP;AAAW;;AAE1BA,aAASA,OAAO,CAAP,EAAUO,WAAV,KAA0BP,OAAOS,KAAP,CAAa,CAAb,CAAnC;AACA,WAAOT,OAAOC,OAAP,CAAe,cAAf,EAA+B,UAAUC,CAAV,EAAaI,MAAb,EAAqB;AACzD,UAAIA,MAAJ,EAAY;AACV,qBAAWA,OAAOC,WAAP,EAAX;AACD,OAFD,MAEO;AACL,eAAO,GAAP;AACD;AACF,KANM,CAAP;AAQD,GA1BQ;;;AA4BT;AACAG,QA7BS,kBA6BDC,MA7BC,EA6BOC,MA7BP,EA6Be;AACtB,QAAIA,MAAJ,EAAY;AACV,aAAOC,OAAOC,IAAP,CAAYF,MAAZ,EAAoBf,GAApB,CAAwB,UAACkB,GAAD,EAAS;AACtCJ,eAAOI,GAAP,IAAcH,OAAOG,GAAP,CAAd;AACD,OAFM,CAAP;AAGD;AACF,GAnCQ;;;AAqCT;AACAC,QAtCS,kBAsCDC,GAtCC,EAsCIC,QAtCJ,EAsCc;AACrB,WAAOL,OAAOC,IAAP,CAAYG,GAAZ,EAAiBpB,GAAjB,CAAqB,UAACkB,GAAD;AAAA,aAC1BG,SAASD,IAAIF,GAAJ,CAAT,EAAmBA,GAAnB,CAD0B;AAAA,KAArB,CAAP;AAED,GAzCQ;;;AA2CTrB,gBA3CS;AA4CTE,kBA5CS;AA6CTC;AA7CS,CAAX;;AAgDAsB,OAAOC,OAAP,GAAiBtB,IAAjB","file":"plus.js","sourcesContent":["// Both of these internal methods are really small/simple and we are only\n// working with arrays anyway\nconst filter = require('lodash/_arrayFilter')\nconst forEach = require('lodash/_arrayEach')\nconst map = require('lodash/_arrayMap')\n\n// require('underscore-plus')\nlet plus = {\n  camelize (string) {\n    if (string) {\n      return string.replace(/[_-]+(\\w)/g, m => m[1].toUpperCase())\n    } else {\n      return ''\n    }\n  },\n\n  uncamelize (string) {\n    if (!string) { return '' }\n    return string.replace(/([A-Z])+/g, (match, letter = '') => `_${letter.toLowerCase()}`)\n  },\n\n  dasherize (string) {\n    if (!string) { return '' }\n\n    string = string[0].toLowerCase() + string.slice(1)\n    return string.replace(/([A-Z])|(_)/g, function (m, letter) {\n      if (letter) {\n        return `-${letter.toLowerCase()}`\n      } else {\n        return '-'\n      }\n    }\n    )\n  },\n\n  // Just _.extend(target, source)\n  extend (target, source) {\n    if (source) {\n      return Object.keys(source).map((key) => {\n        target[key] = source[key]\n      })\n    }\n  },\n\n  // Just _.forOwn(obj, iterator)\n  forOwn (obj, iterator) {\n    return Object.keys(obj).map((key) =>\n      iterator(obj[key], key))\n  },\n\n  filter,\n  forEach,\n  map\n}\n\nmodule.exports = plus\n"]}