{"version":3,"sources":["../../../src/plugins/simple-verbs.js"],"names":["toQueryString","require","module","exports","verbs","fetch","path","query","method","read","options","isRaw","remove","data","isBoolean","create","contentType","update","add","contains","args","join"],"mappings":";;AAAA,IAAMA,gBAAgBC,QAAQ,wBAAR,CAAtB;;AAEA;AACAC,OAAOC,OAAP,GAAiB;AACfC,SAAO;AACLC,SADK,iBACEC,IADF,EACQC,KADR,EACe;AAAE,aAAO,EAACC,QAAQ,KAAT,EAAgBF,WAASA,IAAT,GAAgBN,cAAcO,KAAd,CAAhC,EAAP;AAAgE,KADjF;AAELE,QAFK,gBAECH,IAFD,EAEOC,KAFP,EAEc;AAAE,aAAO,EAACC,QAAQ,KAAT,EAAgBF,WAASA,IAAT,GAAgBN,cAAcO,KAAd,CAAhC,EAAwDG,SAAS,EAACC,OAAO,IAAR,EAAjE,EAAP;AAAwF,KAFxG;AAGLC,UAHK,kBAGGN,IAHH,EAGSO,IAHT,EAGe;AAAE,aAAO,EAACL,QAAQ,QAAT,EAAmBF,UAAnB,EAAyBO,UAAzB,EAA+BH,SAAS,EAACI,WAAW,IAAZ,EAAxC,EAAP;AAAmE,KAHpF;AAILC,UAJK,kBAIGT,IAJH,EAISO,IAJT,EAIeG,WAJf,EAI4B;AAC/B,UAAIA,WAAJ,EAAiB;AACf,eAAO,EAACR,QAAQ,MAAT,EAAiBF,UAAjB,EAAuBO,UAAvB,EAA6BH,SAAS,EAACC,OAAO,IAAR,EAAcK,wBAAd,EAAtC,EAAP;AACD,OAFD,MAEO;AACL,eAAO,EAACR,QAAQ,MAAT,EAAiBF,UAAjB,EAAuBO,UAAvB,EAAP;AACD;AACF,KAVI;AAWLI,UAXK,kBAWGX,IAXH,EAWSO,IAXT,EAWe;AAAE,aAAO,EAACL,QAAQ,OAAT,EAAkBF,UAAlB,EAAwBO,UAAxB,EAAP;AAAsC,KAXvD;AAYLK,OAZK,eAYAZ,IAZA,EAYMO,IAZN,EAYY;AAAE,aAAO,EAACL,QAAQ,KAAT,EAAgBF,UAAhB,EAAsBO,UAAtB,EAA4BH,SAAS,EAACI,WAAW,IAAZ,EAArC,EAAP;AAAgE,KAZ9E;AAaLK,YAbK,oBAaKb,IAbL,EAaoB;AAAA,wCAANc,IAAM;AAANA,YAAM;AAAA;;AAAE,aAAO,EAACZ,QAAQ,KAAT,EAAgBF,MAASA,IAAT,SAAiBc,KAAKC,IAAL,CAAU,GAAV,CAAjC,EAAmDX,SAAS,EAACI,WAAW,IAAZ,EAA5D,EAAP;AAAuF;AAb7G;AADQ,CAAjB","file":"simple-verbs.js","sourcesContent":["const toQueryString = require('../helpers/querystring')\n\n// new class SimpleVerbs\nmodule.exports = {\n  verbs: {\n    fetch (path, query) { return {method: 'GET', path: `${path}${toQueryString(query)}`} },\n    read (path, query) { return {method: 'GET', path: `${path}${toQueryString(query)}`, options: {isRaw: true}} },\n    remove (path, data) { return {method: 'DELETE', path, data, options: {isBoolean: true}} },\n    create (path, data, contentType) {\n      if (contentType) {\n        return {method: 'POST', path, data, options: {isRaw: true, contentType}}\n      } else {\n        return {method: 'POST', path, data}\n      }\n    },\n    update (path, data) { return {method: 'PATCH', path, data} },\n    add (path, data) { return {method: 'PUT', path, data, options: {isBoolean: true}} },\n    contains (path, ...args) { return {method: 'GET', path: `${path}/${args.join('/')}`, options: {isBoolean: true}} }\n  }\n}\n"]}