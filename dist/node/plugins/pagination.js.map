{"version":3,"sources":["../../../src/plugins/pagination.js"],"names":["module","exports","input","jqXHR","data","Promise","resolve","Array","isArray","items","slice","linksHeader","headers","get","split","forEach","part","match","unusedField","href","rel"],"mappings":";;;;;;;;AAAAA,OAAOC,OAAP,GAAiB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,4CACUC,KADV,EACiB;AAAA,UACzBC,KADyB,GACVD,KADU,CACzBC,KADyB;AAAA,UAClBC,IADkB,GACVF,KADU,CAClBE,IADkB;;AAE9B,UAAI,CAACD,KAAL,EAAY;AAAE,eAAOE,QAAQC,OAAR,CAAgBJ,KAAhB,CAAP;AAA+B,OAFf,CAEgB;;AAE9C;AACA;;AAEA,UAAIK,MAAMC,OAAN,CAAcJ,IAAd,CAAJ,EAAyB;AACvBA,eAAO,EAACK,OAAOL,KAAKM,KAAL,EAAR,CAAsB;;AAE7B;AACA;AAHO,SAAP,CAIA,IAAIC,cAAcR,MAAMS,OAAN,CAAcC,GAAd,CAAkB,MAAlB,CAAlB;AACA,YAAIF,WAAJ,EAAiB;AACfA,sBAAYG,KAAZ,CAAkB,GAAlB,EAAuBC,OAAvB,CAA+B,UAACC,IAAD,EAAU;AAAA,8BACRA,KAAKC,KAAL,CAAW,0BAAX,CADQ;AAAA;AAAA,gBAClCC,WADkC;AAAA,gBACrBC,IADqB;AAAA,gBACfC,GADe;AAEvC;AACA;;;AACAhB,iBAAQgB,GAAR,kBAA0BD,IAA1B;AACD,WALD;AAMD;AACDjB,cAAME,IAAN,GAAaA,IAAb,CAduB,CAcL;AACnB;AACD,aAAOC,QAAQC,OAAR,CAAgBJ,KAAhB,CAAP;AACD;AAzBc;;AAAA;AAAA,MAAjB","file":"pagination.js","sourcesContent":["module.exports = new class Pagination {\n  responseMiddlewareAsync (input) {\n    let {jqXHR, data} = input\n    if (!jqXHR) { return Promise.resolve(input) } // The plugins are all used in `octo.parse()` which does not have a jqXHR\n\n    // Only JSON responses have next/prev/first/last link headers\n    // Add them to data so the resolved value is iterable\n\n    if (Array.isArray(data)) {\n      data = {items: data.slice()} // Convert to object so we can add the next/prev/first/last link headers\n\n      // Parse the Link headers\n      // of the form `<http://a.com>; rel=\"next\", <https://b.com?a=b&c=d>; rel=\"previous\"`\n      let linksHeader = jqXHR.headers.get('Link')\n      if (linksHeader) {\n        linksHeader.split(',').forEach((part) => {\n          let [unusedField, href, rel] = part.match(/<([^>]+)>; rel=\"([^\"]+)\"/)\n          // Add the pagination functions on the JSON since Promises resolve one value\n          // Name the functions `nextPage`, `previousPage`, `firstPage`, `lastPage`\n          data[`${rel}_page_url`] = href\n        })\n      }\n      input.data = data // or throw new Error('BUG! Expected JSON data to exist')\n    }\n    return Promise.resolve(input)\n  }\n}()\n"]}