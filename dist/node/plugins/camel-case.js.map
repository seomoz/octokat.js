{"version":3,"sources":["../../../src/plugins/camel-case.js"],"names":["plus","require","module","exports","input","data","replace","Promise","resolve","Array","isArray","_replaceArray","Date","Object","_replaceObject","orig","acc","iterable","keys","i","length","key","value","_replaceKeyValue","arr","map","item","camelize"],"mappings":";;;;;;AAAA,IAAMA,OAAOC,QAAQ,SAAR,CAAb;;AAEAC,OAAOC,OAAP,GAAiB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,4CAEUC,KAFV,EAEiB;AAAA,UACzBC,IADyB,GACjBD,KADiB,CACzBC,IADyB;;AAE9BA,aAAO,KAAKC,OAAL,CAAaD,IAAb,CAAP;AACAD,YAAMC,IAAN,GAAaA,IAAb,CAH8B,CAGZ;AAClB,aAAOE,QAAQC,OAAR,CAAgBJ,KAAhB,CAAP;AACD;AAPc;AAAA;AAAA,4BASNC,IATM,EASA;AACb,UAAII,MAAMC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACvB,eAAO,KAAKM,aAAL,CAAmBN,IAAnB,CAAP;AACD,OAFD,MAEO,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AACrC,eAAOA,IAAP;AACD,OAFM,MAEA,IAAIA,gBAAgBO,IAApB,EAA0B;AAC/B,eAAOP,IAAP;AACD,OAFM,MAEA,IAAIA,SAASQ,OAAOR,IAAP,CAAb,EAA2B;AAChC,eAAO,KAAKS,cAAL,CAAoBT,IAApB,CAAP;AACD,OAFM,MAEA;AACL,eAAOA,IAAP;AACD;AACF;AArBc;AAAA;AAAA,mCAuBCU,IAvBD,EAuBO;AACpB,UAAIC,MAAM,EAAV;AACA,UAAIC,WAAWJ,OAAOK,IAAP,CAAYH,IAAZ,CAAf;AACA,WAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIF,SAASG,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,YAAIE,MAAMJ,SAASE,CAAT,CAAV;AACA,YAAIG,QAAQP,KAAKM,GAAL,CAAZ;AACA,aAAKE,gBAAL,CAAsBP,GAAtB,EAA2BK,GAA3B,EAAgCC,KAAhC;AACD;;AAED,aAAON,GAAP;AACD;AAjCc;AAAA;AAAA,kCAmCAD,IAnCA,EAmCM;AAAA;;AACnB,UAAIS,MAAOT,KAAKU,GAAL,CAAS,UAACC,IAAD;AAAA,eAAU,MAAKpB,OAAL,CAAaoB,IAAb,CAAV;AAAA,OAAT,CAAX;AACA;AACA,UAAIT,WAAWJ,OAAOK,IAAP,CAAYH,IAAZ,CAAf;AACA,WAAK,IAAII,IAAI,CAAb,EAAgBA,IAAIF,SAASG,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,YAAIE,MAAMJ,SAASE,CAAT,CAAV;AACA,YAAIG,QAAQP,KAAKM,GAAL,CAAZ;AACA,aAAKE,gBAAL,CAAsBC,GAAtB,EAA2BH,GAA3B,EAAgCC,KAAhC;AACD;AACD,aAAOE,GAAP;AACD;;AAED;;AA/Ce;AAAA;AAAA,qCAgDGR,GAhDH,EAgDQK,GAhDR,EAgDaC,KAhDb,EAgDoB;AACjC,aAAON,IAAIhB,KAAK2B,QAAL,CAAcN,GAAd,CAAJ,IAA0B,KAAKf,OAAL,CAAagB,KAAb,CAAjC;AACD;AAlDc;;AAAA;AAAA,MAAjB","file":"camel-case.js","sourcesContent":["const plus = require('../plus')\n\nmodule.exports = new class CamelCase {\n\n  responseMiddlewareAsync (input) {\n    let {data} = input\n    data = this.replace(data)\n    input.data = data // or throw new Error('BUG! Expected JSON data to exist')\n    return Promise.resolve(input)\n  }\n\n  replace (data) {\n    if (Array.isArray(data)) {\n      return this._replaceArray(data)\n    } else if (typeof data === 'function') {\n      return data\n    } else if (data instanceof Date) {\n      return data\n    } else if (data === Object(data)) {\n      return this._replaceObject(data)\n    } else {\n      return data\n    }\n  }\n\n  _replaceObject (orig) {\n    let acc = {}\n    let iterable = Object.keys(orig)\n    for (let i = 0; i < iterable.length; i++) {\n      let key = iterable[i]\n      let value = orig[key]\n      this._replaceKeyValue(acc, key, value)\n    }\n\n    return acc\n  }\n\n  _replaceArray (orig) {\n    let arr = (orig.map((item) => this.replace(item)))\n    // Convert the nextPage methods for paged results\n    let iterable = Object.keys(orig)\n    for (let i = 0; i < iterable.length; i++) {\n      let key = iterable[i]\n      let value = orig[key]\n      this._replaceKeyValue(arr, key, value)\n    }\n    return arr\n  }\n\n  // Convert things that end in `_url` to methods which return a Promise\n  _replaceKeyValue (acc, key, value) {\n    return acc[plus.camelize(key)] = this.replace(value)\n  }\n}()\n"]}