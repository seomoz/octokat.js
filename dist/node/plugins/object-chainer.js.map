{"version":3,"sources":["../../../src/plugins/object-chainer.js"],"names":["OBJECT_MATCHER","require","TREE_OPTIONS","VerbMethods","Chainer","module","exports","chainer","url","obj","result","key","re","item","test","context","iterable","split","i","length","k","chain","push","input","plugins","requester","data","verbMethods","chainChildren","Array","isArray","datum","Promise","resolve"],"mappings":";;;;;;AAAA,IAAMA,iBAAiBC,QAAQ,2BAAR,CAAvB;AACA,IAAMC,eAAeD,QAAQ,yBAAR,CAArB;;eAEwBA,QAAQ,iBAAR,C;IAAhBE,W,YAAAA,W;;AACR,IAAMC,UAAUH,QAAQ,YAAR,CAAhB;;AAEAI,OAAOC,OAAP,GAAiB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,kCACAC,OADA,EACSC,GADT,EACcC,GADd,EACmB;AAChC,aAAQ,YAAM;AACZ,YAAIC,SAAS,EAAb;AACA,aAAK,IAAIC,GAAT,IAAgBX,cAAhB,EAAgC;AAC9B,cAAIY,KAAKZ,eAAeW,GAAf,CAAT;AACA,cAAIE,aAAJ;AACA,cAAID,GAAGE,IAAH,CAAQL,IAAID,GAAZ,CAAJ,EAAsB;AACpB,gBAAIO,UAAUb,YAAd;AACA,gBAAIc,WAAWL,IAAIM,KAAJ,CAAU,GAAV,CAAf;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,SAASG,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,kBAAIE,IAAIJ,SAASE,CAAT,CAAR;AACAH,wBAAUA,QAAQK,CAAR,CAAV;AACD;AACDP,mBAAON,QAAQc,KAAR,CAAcb,GAAd,EAAmBY,CAAnB,EAAsBL,OAAtB,EAA+BN,GAA/B,CAAP;AACD;AACDC,iBAAOY,IAAP,CAAYT,IAAZ;AACD;AACD,eAAOH,MAAP;AACD,OAjBM,EAAP;AAkBD;AApBc;AAAA;AAAA,4CAsBUa,KAtBV,EAsBiB;AAAA,UACzBC,OADyB,GACQD,KADR,CACzBC,OADyB;AAAA,UAChBC,SADgB,GACQF,KADR,CAChBE,SADgB;AAAA,UACLC,IADK,GACQH,KADR,CACLG,IADK;AAAA,UACClB,GADD,GACQe,KADR,CACCf,GADD;AAE9B;AACA;;AACA,UAAImB,cAAc,IAAIxB,WAAJ,CAAgBqB,OAAhB,EAAyBC,SAAzB,CAAlB;AACA,UAAIlB,UAAU,IAAIH,OAAJ,CAAYuB,WAAZ,CAAd;AACA,UAAInB,GAAJ,EAAS;AACPD,gBAAQc,KAAR,CAAcb,GAAd,EAAmB,IAAnB,EAAyB,EAAzB,EAA6BkB,IAA7B;AACA,aAAKE,aAAL,CAAmBrB,OAAnB,EAA4BC,GAA5B,EAAiCkB,IAAjC;AACD,OAHD,MAGO;AACLnB,gBAAQc,KAAR,CAAc,EAAd,EAAkB,IAAlB,EAAwB,EAAxB,EAA4BK,IAA5B;AACA;AACA,YAAIG,MAAMC,OAAN,CAAcJ,IAAd,CAAJ,EAAyB;AACvB,eAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAIQ,KAAKP,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,gBAAIa,QAAQL,KAAKR,CAAL,CAAZ;AACA,iBAAKU,aAAL,CAAmBrB,OAAnB,EAA4BwB,MAAMvB,GAAlC,EAAuCuB,KAAvC;AACD;AACF;AACF;;AAED,aAAOC,QAAQC,OAAR,CAAgBV,KAAhB,CAAP;AACD;AA3Cc;;AAAA;AAAA,MAAjB","file":"object-chainer.js","sourcesContent":["const OBJECT_MATCHER = require('../grammar/object-matcher')\nconst TREE_OPTIONS = require('../grammar/tree-options')\n\nconst { VerbMethods } = require('../verb-methods')\nconst Chainer = require('../chainer')\n\nmodule.exports = new class ObjectChainer {\n  chainChildren (chainer, url, obj) {\n    return (() => {\n      let result = []\n      for (let key in OBJECT_MATCHER) {\n        let re = OBJECT_MATCHER[key]\n        let item\n        if (re.test(obj.url)) {\n          let context = TREE_OPTIONS\n          let iterable = key.split('.')\n          for (let i = 0; i < iterable.length; i++) {\n            var k = iterable[i]\n            context = context[k]\n          }\n          item = chainer.chain(url, k, context, obj)\n        }\n        result.push(item)\n      }\n      return result\n    })()\n  }\n\n  responseMiddlewareAsync (input) {\n    let {plugins, requester, data, url} = input\n    // unless data\n    //    throw new Error('BUG! Expected JSON data to exist')\n    let verbMethods = new VerbMethods(plugins, requester)\n    let chainer = new Chainer(verbMethods)\n    if (url) {\n      chainer.chain(url, true, {}, data)\n      this.chainChildren(chainer, url, data)\n    } else {\n      chainer.chain('', null, {}, data)\n      // For the paged results, rechain all children in the array\n      if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n          let datum = data[i]\n          this.chainChildren(chainer, datum.url, datum)\n        }\n      }\n    }\n\n    return Promise.resolve(input)\n  }\n}()\n"]}