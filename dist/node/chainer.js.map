{"version":3,"sources":["../../src/chainer.js"],"names":["plus","require","module","exports","_verbMethods","path","name","contextTree","fn","args","length","Error","separator","chain","join","injectVerbMethods","camelize","Object","defineProperty","configurable","enumerable","get"],"mappings":";;;;;;;;AAAA,IAAMA,OAAOC,QAAQ,QAAR,CAAb;;AAEA;AACA;AACA;AACA;AACA;;AAEAC,OAAOC,OAAP;AACE,mBAAaC,YAAb,EAA2B;AAAA;;AACzB,SAAKA,YAAL,GAAoBA,YAApB;AACD;;AAHH;AAAA;AAAA,0BAKSC,IALT,EAKeC,IALf,EAKqBC,WALrB,EAKkCC,EALlC,EAKsC;AAAA;;AAClC,UAAI,OAAOA,EAAP,KAAc,WAAd,IAA6BA,OAAO,IAAxC,EAA8C;AAC5CA,aAAK,cAAa;AAAA,4CAATC,IAAS;AAATA,gBAAS;AAAA;;AAChB,cAAI,CAACA,KAAKC,MAAV,EAAkB;AAAE,kBAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AAAmE;AACvF,cAAIC,YAAY,GAAhB;AACA;AACA,cAAIN,SAAS,SAAb,EAAwB;AACtBM,wBAAY,KAAZ;AACD;AACD,iBAAO,MAAKC,KAAL,CAAcR,IAAd,SAAsBI,KAAKK,IAAL,CAAUF,SAAV,CAAtB,EAA8CN,IAA9C,EAAoDC,WAApD,CAAP;AACD,SARD;AASD;;AAED,WAAKH,YAAL,CAAkBW,iBAAlB,CAAoCV,IAApC,EAA0CG,EAA1C;;AAEA,UAAI,OAAOA,EAAP,KAAc,UAAd,IAA4B,QAAOA,EAAP,yCAAOA,EAAP,OAAc,QAA9C,EAAwD;AACtD,aAAKF,IAAL,IAAaC,eAAe,EAA5B,EAAgC;AAC9B,WAAC,gBAAQ;AACP;AACA,mBAAOC,GAAGR,KAAKgB,QAAL,CAAcV,IAAd,CAAH,CAAP;;AAEA,mBAAOW,OAAOC,cAAP,CAAsBV,EAAtB,EAA0BR,KAAKgB,QAAL,CAAcV,IAAd,CAA1B,EAA+C;AACpDa,4BAAc,IADsC;AAEpDC,0BAAY,IAFwC;AAGpDC,mBAAK;AAAA,uBAAM,MAAKR,KAAL,CAAcR,IAAd,SAAsBC,IAAtB,EAA8BA,IAA9B,EAAoCC,YAAYD,IAAZ,CAApC,CAAN;AAAA;AAH+C,aAA/C,CAAP;AAMD,WAVD,EAUGA,IAVH;AAWD;AACF;;AAED,aAAOE,EAAP;AACD;AArCH;;AAAA;AAAA","file":"chainer.js","sourcesContent":["const plus = require('./plus')\n\n// Daisy-Chainer\n// ===============================\n//\n// Generates the functions so `octo.repos(...).issues.comments.fetch()` works.\n// Constructs a URL for the verb methods (like `.fetch` and `.create`).\n\nmodule.exports = class Chainer {\n  constructor (_verbMethods) {\n    this._verbMethods = _verbMethods\n  }\n\n  chain (path, name, contextTree, fn) {\n    if (typeof fn === 'undefined' || fn === null) {\n      fn = (...args) => {\n        if (!args.length) { throw new Error('BUG! must be called with at least one argument') }\n        let separator = '/'\n        // Special-case compare because its args turn into '...' instead of the usual '/'\n        if (name === 'compare') {\n          separator = '...'\n        }\n        return this.chain(`${path}/${args.join(separator)}`, name, contextTree)\n      }\n    }\n\n    this._verbMethods.injectVerbMethods(path, fn)\n\n    if (typeof fn === 'function' || typeof fn === 'object') {\n      for (name in contextTree || {}) {\n        (name => {\n          // Delete the key if it already exists\n          delete fn[plus.camelize(name)]\n\n          return Object.defineProperty(fn, plus.camelize(name), {\n            configurable: true,\n            enumerable: true,\n            get: () => this.chain(`${path}/${name}`, name, contextTree[name])\n          }\n          )\n        })(name)\n      }\n    }\n\n    return fn\n  }\n}\n"]}