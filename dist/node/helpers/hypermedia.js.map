{"version":3,"sources":["../../../src/helpers/hypermedia.js"],"names":["toQueryString","require","deprecate","module","exports","url","m","templateParams","i","exec","match","param","fieldName","slice","length","fieldValue","test","Error","optionalNames","split","optionalParams","j","k","replace"],"mappings":";;AAAA,IAAMA,gBAAgBC,QAAQ,eAAR,CAAtB;AACA,IAAMC,YAAYD,QAAQ,cAAR,CAAlB;;AAEAE,OAAOC,OAAP,GAAiB,UAAUC,GAAV,EAAwB;AACvC;AACA;AACA,MAAIC,UAAJ;AACA,MAAI,uDAAgB,CAApB,EAAuB;AACrB,QAAIC,iBAAiB,EAArB;AACD,GAFD,MAEO;AACL,QAAI,qDAAc,CAAlB,EAAqB;AACnBL,gBAAU,uGAAV;AACD;;AAED,QAAIK,iEAAJ;AACD;;AAED;AACA;AACA;AACA,MAAIC,IAAI,CAAR;AACA,SAAOF,IAAI,eAAeG,IAAf,CAAoBJ,GAApB,CAAX,EAAqC;AACnC;AACA,QAAIK,QAAQJ,EAAE,CAAF,CAAZ;AACA,QAAIK,QAAQ,EAAZ;AACA;AACA,YAAQD,MAAM,CAAN,CAAR;AACE,WAAK,GAAL;AACE,YAAIE,YAAYF,MAAMG,KAAN,CAAY,CAAZ,EAAeH,MAAMI,MAAN,GAAe,CAA9B,CAAhB,CADF,CACmD;AACjD,YAAIC,aAAaR,eAAeK,SAAf,CAAjB;AACA,YAAIG,UAAJ,EAAgB;AACd,cAAI,KAAKC,IAAL,CAAUD,UAAV,CAAJ,EAA2B;AACzB,kBAAM,IAAIE,KAAJ,0DAAiEL,SAAjE,CAAN;AACD;AACDD,wBAAYI,UAAZ;AACD;AACD;AACF,WAAK,GAAL;AACEH,oBAAYF,MAAMG,KAAN,CAAY,CAAZ,EAAeH,MAAMI,MAAN,GAAe,CAA9B,CAAZ,CADF,CAC+C;AAC7CC,qBAAaR,eAAeK,SAAf,CAAb;AACA,YAAIG,UAAJ,EAAgB;AACdJ,kBAAQI,UAAR;AACD;AACD;AACF,WAAK,GAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAIG,gBAAgBR,MAAMG,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAD,GAAK,CAApB,EAAuBM,KAAvB,CAA6B,GAA7B,CAApB,CARF,CAQwD;AACtD,YAAIC,iBAAiB,EAArB;AACA,aAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,cAAcJ,MAAlC,EAA0CO,GAA1C,EAA+C;AAC7CT,sBAAYM,cAAcG,CAAd,CAAZ;AACAD,yBAAeR,SAAf,IAA4BL,eAAeK,SAAf,CAA5B;AACD;AACDD,gBAAQX,cAAcoB,cAAd,CAAR;AACA;AACF,WAAK,GAAL;AACEF,wBAAgBR,MAAMG,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAD,GAAK,CAApB,EAAuBM,KAAvB,CAA6B,GAA7B,CAAhB,CADF,CACoD;AAClDC,yBAAiB,EAAjB;AACA,aAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIJ,cAAcJ,MAAlC,EAA0CQ,GAA1C,EAA+C;AAC7CV,sBAAYM,cAAcI,CAAd,CAAZ;AACAF,yBAAeR,SAAf,IAA4BL,eAAeK,SAAf,CAA5B;AACD;AACDD,gBAAQX,cAAcoB,cAAd,EAA8B,IAA9B,CAAR,CAPF,CAO8C;AAC5C;;AAEF;AACE;AACAR,oBAAYF,MAAMG,KAAN,CAAY,CAAZ,EAAeH,MAAMI,MAAN,GAAe,CAA9B,CAAZ,CAFF,CAE+C;AAC7C,YAAIP,eAAeK,SAAf,CAAJ,EAA+B;AAC7BD,kBAAQJ,eAAeK,SAAf,CAAR;AACD,SAFD,MAEO;AACL,gBAAM,IAAIK,KAAJ,oDAA2DL,SAA3D,CAAN;AACD;AAnDL;;AAsDAP,UAAMA,IAAIkB,OAAJ,CAAYb,KAAZ,EAAmBC,KAAnB,CAAN;AACAH;AACD;;AAED,SAAOH,GAAP;AACD,CAlFD","file":"hypermedia.js","sourcesContent":["const toQueryString = require('./querystring')\nconst deprecate = require('../deprecate')\n\nmodule.exports = function (url, ...args) {\n  // Deprecated interface. Use an Object to specify the args in the template.\n  // the order of fields in the template should not matter.\n  let m\n  if (args.length === 0) {\n    var templateParams = {}\n  } else {\n    if (args.length > 1) {\n      deprecate('When filling in a template URL pass all the field to fill in 1 object instead of comma-separated args')\n    }\n\n    var templateParams = args[0]\n  }\n\n  // url can contain {name} or {/name} in the URL.\n  // for every arg passed in, replace {...} with that arg\n  // and remove the rest (they may or may not be optional)\n  let i = 0\n  while (m = /(\\{[^\\}]+\\})/.exec(url)) {\n    // `match` is something like `{/foo}` or `{?foo,bar}` or `{foo}` (last one means it is required)\n    let match = m[1]\n    let param = ''\n    // replace it\n    switch (match[1]) {\n      case '/':\n        let fieldName = match.slice(2, match.length - 1) // omit the braces and the slash\n        let fieldValue = templateParams[fieldName]\n        if (fieldValue) {\n          if (/\\//.test(fieldValue)) {\n            throw new Error(`Octokat Error: this field must not contain slashes: ${fieldName}`)\n          }\n          param = `/${fieldValue}`\n        }\n        break\n      case '+':\n        fieldName = match.slice(2, match.length - 1) // omit the braces and the `+`\n        fieldValue = templateParams[fieldName]\n        if (fieldValue) {\n          param = fieldValue\n        }\n        break\n      case '?':\n        // Strip off the \"{?\" and the trailing \"}\"\n        // For example, the URL is `/assets{?name,label}`\n        //   which turns into `/assets?name=foo.zip`\n        // Used to upload releases via the repo releases API.\n        //\n        // When match contains `,` or\n        // `args.length is 1` and args[0] is object match the args to those in the template\n        let optionalNames = match.slice(2, -2 + 1).split(',') // omit the braces and the `?` before splitting\n        let optionalParams = {}\n        for (let j = 0; j < optionalNames.length; j++) {\n          fieldName = optionalNames[j]\n          optionalParams[fieldName] = templateParams[fieldName]\n        }\n        param = toQueryString(optionalParams)\n        break\n      case '&':\n        optionalNames = match.slice(2, -2 + 1).split(',') // omit the braces and the `?` before splitting\n        optionalParams = {}\n        for (let k = 0; k < optionalNames.length; k++) {\n          fieldName = optionalNames[k]\n          optionalParams[fieldName] = templateParams[fieldName]\n        }\n        param = toQueryString(optionalParams, true) // true means omitQuestionMark\n        break\n\n      default:\n        // This is a required field. ie `{repoName}`\n        fieldName = match.slice(1, match.length - 1) // omit the braces\n        if (templateParams[fieldName]) {\n          param = templateParams[fieldName]\n        } else {\n          throw new Error(`Octokat Error: Required parameter is missing: ${fieldName}`)\n        }\n    }\n\n    url = url.replace(match, param)\n    i++\n  }\n\n  return url\n}\n"]}